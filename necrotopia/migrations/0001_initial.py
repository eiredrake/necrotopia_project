# Generated by Django 4.2.1 on 2023-06-07 19:22

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import necrotopia.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('display_name', models.CharField(max_length=255)),
                ('full_name', models.CharField(max_length=255)),
                ('email', models.EmailField(error_messages={'unique': 'A user with that username already exists'}, max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('pronouns', models.CharField(blank=True, max_length=255, null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether this user should be treated as a superuser. ', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birth_date', models.DateTimeField(blank=True, null=True, verbose_name='birth_date')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('active', models.BooleanField(default=True)),
                ('registry_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='registry_date')),
                ('registrar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapter_registrar', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'chapters',
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descriptor', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='RatedSkillItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField(choices=[(0, 'Ungraded'), (1, 'Basic'), (2, 'Proficient'), (3, 'Master')], default=necrotopia.models.Grade['Basic'])),
                ('mind', models.IntegerField(blank=True, default=5, null=True)),
                ('time', models.IntegerField(blank=True, default=10, null=True)),
                ('one_use_per_game', models.BooleanField(blank=True, default=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SkillItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('category', models.IntegerField(choices=[(1, 'Combat'), (2, 'Civilized'), (3, 'Wasteland'), (4, 'Anomaly'), (5, 'Lore')], default=necrotopia.models.SkillCategory['Combat'])),
                ('registry_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='registry_date')),
                ('registrar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descriptor', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='UsefulLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('url', models.URLField()),
                ('published', models.BooleanField(default=True)),
                ('registry_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='registry_date')),
                ('chapter_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='necrotopia.chapter')),
                ('registrar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chapter Useful Link',
                'verbose_name_plural': 'Chapter Useful Links',
            },
        ),
        migrations.CreateModel(
            name='SkillRatings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField(choices=[(0, 'Ungraded'), (1, 'Basic'), (2, 'Proficient'), (3, 'Master')], default=necrotopia.models.Grade['Basic'])),
                ('description', models.CharField(max_length=1000)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='necrotopia.skillitem')),
            ],
            options={
                'verbose_name': 'SkillRating',
                'verbose_name_plural': 'SkillRatings',
                'ordering': ['grade'],
            },
        ),
        migrations.AddField(
            model_name='skillitem',
            name='skill_ratings',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='skill_ratings', to='necrotopia.skillratings'),
        ),
        migrations.AddField(
            model_name='skillitem',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='ResourceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('expiration_units', models.SmallIntegerField(blank=True, default=6, null=True)),
                ('time_units', models.IntegerField(choices=[(0, 'No_Expiration'), (1, 'end_of_event'), (2, 'hours'), (3, 'days'), (4, 'months'), (5, 'years')], default=necrotopia.models.TimeUnits['months'])),
                ('registry_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='registry_date')),
                ('rated_skills', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_skills', to='necrotopia.ratedskillitem')),
                ('registrar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Resource',
                'verbose_name_plural': 'Resources',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='ratedskillitem',
            name='resource_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='necrotopia.resourceitem'),
        ),
        migrations.AddField(
            model_name='ratedskillitem',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='necrotopia.skillitem'),
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('registry_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='registry_date')),
                ('registrar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChapterStaffType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('registry_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='registry_date')),
                ('registrar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'chapter staff type',
            },
        ),
        migrations.CreateModel(
            name='ChapterStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='necrotopia.chapter')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='necrotopia.department')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='necrotopia.chapterstafftype')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='chapter',
            name='staff',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='necrotopia.chapterstaff'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='useful_links',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='necrotopia.usefullinks'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='gender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='necrotopia.gender'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='title',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='django_user_title', to='necrotopia.title'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
